#include <stdio.h>
#include <stdlib.h>
#include<conio.h>
//Done 
struct node
{
    int data;
    struct node *next;
};

void llt(struct node *head)
{
    struct node *ptr=head;
    printf("Element: %d\n",ptr->data);
    ptr=ptr->next;
    
    while (ptr != head)
    {
        printf("Element: %d\n", ptr->data);
        ptr = ptr->next;
    }
    //do{
        //printf("Elemt: %d",ptr->data);
        //ptr=ptr->next;
        //}
        //while(ptr != head);
    
}

// Case 1: Deleting the first element from the linked list
struct node * deleteFirst(struct node * head){
    struct node *p=head;
    struct node *q=head->next;
    while (q->next != head)
    {
        q=q->next;
    }
    q->next=p->next;
    struct node *ptr=p->next;
    free (p);
    return ptr;
}

//case 2 (At Index)
struct node *deleteAtIndex(struct node *head,int index)
{
    struct node *ptr=head;
    struct node *p=head->next;
    int i=0;
    for (i=0;i<index-1;i++)
    {
        ptr=ptr->next;
        p=p->next;
    }
    ptr->next=p->next;
    free(p);
    return head;
}

//case 3(deletion At End)
struct node *deleteAtEnd(struct node *head)
{
    struct node *ptr=head;
    struct node *p=head->next;
    while (p->next != head)
    {
        ptr=ptr->next;
        p=p->next;
    }
    ptr->next=head;
    free(p);
    return head;
}
        
//case 4: Deletion at a Given Value 
struct node *deleteAtValue(struct node *head,int value)
{
    struct node *p=head;
    struct node *q=head->next;
    while(q->next != head && q->data !=value)
    {
        p=p->next;
        q=q->next;
    }
    if (q->data==value)
    {
        p->next=q->next;
        free(q);
    }
    return head;
}


int main()
{
    struct node *head;
    struct node *second;
    struct node *third;
    struct node *fourth;
    

    // Allocate memory for nodes in the linked list in Heap
    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));
    fourth = (struct node *)malloc(sizeof(struct node));

    // Link first and second nodes
    head->data = 4;
    head->next = second;

    // Link second and third nodes
    second->data = 3;
    second->next = third;

    // Link third and fourth nodes
    third->data = 8;
    third->next = fourth;

    // Terminate the list at the third node
    fourth->data = 1;
    fourth->next = head;

    printf("Linked list before deletion\n");
    llt(head);
    

  //  head = deleteFirst(head); // For deleting first element of the linked list
//   head = deleteAtIndex(head, 1);
 //  head = deleteAtEnd(head);
  head= deleteAtValue(head,8);
    printf("Linked list after deletion\n");
    llt(head);
   

    return 0;
    }

        
        
        
        
